Kai R. Weiner
Worked W/ Rueben Boero and Vanessa Heynes

*******PRIVATE KEY*******

What I found in the private key:

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

3. I expect the private key file to contain the version, n, e, d, p, q, d mod (p-1), d mod (q-1), (inverse of q) mod p, and potentially other prime infos in the following format:

(From RFC 8017 Appendix 1.2)

         RSAPrivateKey ::= SEQUENCE {
             version           Version,
             modulus           INTEGER,  -- n
             publicExponent    INTEGER,  -- e
             privateExponent   INTEGER,  -- d
             prime1            INTEGER,  -- p
             prime2            INTEGER,  -- q
             exponent1         INTEGER,  -- d mod (p-1)
             exponent2         INTEGER,  -- d mod (q-1)
             coefficient       INTEGER,  -- (inverse of q) mod p
             otherPrimeInfos   OtherPrimeInfos OPTIONAL
         }

4. For Lapo Luchino's decoder: We copied our RSA key, pasted it in the input area, and hit the decoding button.

We followed the same process with Michael Holtstrom's decoder, also taking the measure of removing the header and footer before hitting convert with Autodetect.

To see the individual values of hexadecimal numbers, we used the website:
https://www.rapidtables.com/convert/number/hex-to-binary.html
To convert from hexadecimal to binary to decimal when applicable.

5.

Integer one:
	Name/Meaning: Version. From RFC 8017 Appendix 1.2: 
		"version is the version number, for compatibility with future
		revisions of this document.  It SHALL be 0 for this version of the
		document, unless multi-prime is used; in which case, it SHALL be 1.

		Version ::= INTEGER { two-prime(0), multi(1) }
			(CONSTRAINED BY
			{-- version must be multi if otherPrimeInfos present --})"
	Value: 0
	Offset: 4
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x01 = 000000001
			Length form: Definite/Short (value of 0)
			Length in bytes: 1 byte (value of 1)
		Value bytes:
			Decoding shown in value section.

Integer two:
	Name/Meaning: Modulus (n). From RFC 8017 Appendix 1.2:
		"modulus is the RSA modulus n"
	Value: 4138196806302610348041290943225004202972822838543414342871233969961283923539223802079865046318576874029808091234896855959136347165987251818584499967625927942654923341528179827126830027465376944511943848349399081209262463753812392524711169820311167379388278476544108209031262343894802350158654377234265713907734027638396167854479072793028490902356485960474589933730522786484808505184923207820222775455021836583462361195066021992141884539512085644617985569882703450487695982561003302355228653886921571438035053203544313098920486704404052206567483314488791314948685520821334920571971913365759061627668916938723132123696621027016564218174988261875182991096230594803285923439703223422447868709367254396482683894610521221377036691316119492874418423655152794530861810144135821852475223935356034628625631186618483463728630387875278814075963467601630865274362588373154827820814322716187690646500989244870040568035367296374057774607061
	Offset: 7
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x82 = 10000010
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 2 bytes (value of 2)
		Further length info bytes:
			0x0181 = 0000000110000001
			Length in bytes: 385 bytes (value of 385)
		Value bytes:
			Decoding shown in value section.

Integer three:
	Name/Meaning: Public exponent (e). From RFC 8017 Appendix 1.2: 
		"publicExponent is the RSA public exponent e"
	Value: 65537
	Offset: 396
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x03 = 000000011
			Length form: Definite/Short (value of 0)
			Length in bytes: 3 bytes (value of 3)
		Value bytes:
			Decoding shown in value section.

Integer four:
	Name/Meaning: Private exponent (d). From RFC 8017 Appendix 1.2: 
		"privateExponent is the RSA private exponent d"
	Value: 2816742013402400857771548097812292483488939896616921287534413784060956628242996087507525517665218056572557626102774216816166643433900320679543402338462624465475891104906092343383138695625417704773384548133395541658360761792480843159357928719872146506967540695487375422992745806167557838140705450570568674667899159847432971479018828420956222449352586816772372588824402871390219610415402587510144159639181975191901864146218169508025349457910716519229804816926278560832760558986377136725966123298173108893751253956133047751486422790646158272851985093008736511795037296999988474428709280962638223406411441260791601747243517412415100004934763908822495781632523258531125078149175100770193215503674305323323695329973134349014692370484232184199107572619615086231320265044927918493352668902565251059569266985290334800592280777850581914977796637780743706894321503239671683729780141889452877646882818309705423199800717238821595681549441
	Offset: 401
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x82 = 10000010
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 2 bytes (value of 2)
		Further length info bytes:
			0x0180 = 0000000110000000
			Length in bytes: 384 bytes (value of 384)
		Value bytes:
			Decoding shown in value section.

Integer five:
	Name/Meaning: Prime 1 (p). From RFC 8017 Appendix 1.2: 
		"prime1 is the prime factor p of n"
	Value:
2062093563505648296223230585266889641383614748880643491689896390278039246489839381523676798701000725919514231678645574189867737736120863365019212270459187373690863797801036939521171499390694702449670847249762897042794787590517561256175849282835391042278638988461927498936608604929343639711605795849297007893325013816531482046436305668446117712908127590020875250862281195428592655861868689956312956603009924556512389776499154974371428269014515907502415655326229409
	Offset: 789
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x81 = 10000001
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 1 bytes (value of 1)
		Further length info bytes:
			0xC1 = 11000001
			Length in bytes: 193 bytes (value of 193)
		Value bytes:
			Decoding shown in value section.

Integer six:
	Name/Meaning: Prime 2 (q). From RFC 8017 Appendix 1.2: 
		"prime2 is the prime factor q of n"
	Value:
2006793910586431730344384765865153519025933318949476365570759044745525125949687806176910906179069093019821567931817802593671115964539601924267949535391580053660942642697184460399954061191451525302783263748288151680881506973601604403296410373848556847952772438287797795282086681189467833244633644135425140414924850861059696381460696499977045578288874229514078115625539979582638363684641899663425654452554201627957949021718828019321800526059441143631734391235803829
	Offset: 985
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x81 = 10000001
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 1 bytes (value of 1)
		Further length info bytes:
			0xC1 = 11000001
			Length in bytes: 193 bytes (value of 193)
		Value bytes:
			Decoding shown in value section.

Integer seven:
	Name/Meaning: Exponent 1 (d mod (p-1)). From RFC 8017 Appendix 1.2: 
		"exponent1 is d mod (p - 1)"
	Value:
895387285604776440264651613057355059353548757326341941849937921756292824471082888750160530091923305270177403464901004085036944211007391378585405550764561928271372066069916355462623821019591973200028736441803908649263946632640466311655952256613008268460918713011902754737614951408736011036104278994818880229799196151441725812829973151150818190582824768134398080684009582042380048031817100417882994431418182448154066799973090820539355390868457194863912634139776161
	Offset: 1181
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x81 = 10000001
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 1 bytes (value of 1)
		Further length info bytes:
			0xC0 = 11000000
			Length in bytes: 192 bytes (value of 192)
		Value bytes:
			Decoding shown in value section.

Integer eight:
	Name/Meaning: Exponent 2 (d mod (q-1)). From RFC 8017 Appendix 1.2: 
		"exponent2 is d mod (q - 1)"
	Value:
1326155263035960935189052898741992061819951265855667362200039725176372853193692558367270922314254594345109667600883427873251786949482668107147422470181331775088908020088993420441302019258442927038745141975900812688211196507617252622218963896440287906495363253273818373069745213782056889848358003782002951099836433860897422686187669632688494544304940018707374599228321573702557103511270824610880901913204295562891661415408406284828537451868537413820388250149250469
	Offset: 1376
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x81 = 10000001
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 1 bytes (value of 1)
		Further length info bytes:
			0xC1 = 11000001
			Length in bytes: 193 bytes (value of 193)
		Value bytes:
			Decoding shown in value section.

Integer nine:
	Name/Meaning: Coefficient (CRT coefficient q^(-1) mod p). From RFC 8017 Appendix 1.2: 
		"coefficient is the CRT coefficient q^(-1) mod p"
	Value: 1071701866141507989229277498504409496049539630361434932092856558492871726323735038737858285719895566411966350105500728279145830551284263287218395938773086187749606397745212806329760745797998824962621195342827536465463241089528039001893876035275210942813376301641922029819185334081197490743080781043712329394163254041910655472340332486782219048725107683216133225736730572276964618482950465968996398573198419513004280976935410362186897210221014842070339758659368887
	Offset: 1572
	DER Encoding:
		Type byte:
			0x02 = 000000010
			Class: Universal (value of 0)
			P/C (Primitive or constructed): Primitive (value of 0)
			Primitive Type: Integer (value of 2)
		Length byte:
			0x81 = 10000001
			Length form: Indefinite/Long (value of 1)
			Bytes for length info: 1 bytes (value of 1)
		Further length info bytes:
			0xC0 = 11000000
			Length in bytes: 192 bytes (value of 192)
		Value bytes:
			Decoding shown in value section.

*******PUBLIC KEY*******

What I found in the public key:

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2WXSz7dN/QGRuZYUzOXArxLLEcCsyOT4blwrZO6h3fksk5P44gECMDHwFJxS+phAw/YAQJ1rK2J5ZgxgIAX1vKv5w/ETkq4uXPBy1AP6S4ep2GnrJVxj5EPX+NkXxAUj648HZk5Bhb6z5YhvpN3NNZsl2fDawPAThLazPdc4PMNodSj/KTAJYP1q8JOyET5/xQnxCB7crW4bMSVeGQVd/8i5S5kOEo9/tCuozbbyuVGSx2n0LX3TQU+Msa6W8L/lsoRgaa/3irdDv1k2FbLqCZxymWpmibxM9NJx+FAyOql08LGPs/dDXuDJVZnoGUAXIV+VDsinHd//hB9KeFFDL5gLVe1c0hP1h2RL1w2WCL1Ewpf4tfM1FLKR+tCKkEdC47K5lRHa8Z80UEuV2Ffo9t+DRCaQApYBF63enJ/KPWgQhnTCbKqgpk9UkJurFwHqup4Clcb4FfLz+lX9G1UXvS0vgyANOZTeSh5N3vI3AYWus/nKW0RXeKwGvbAKH6tU= kairweiner@Kais-MacBook.local

7. I expect the public key file to contain n and e in the following format:

(From RFC 8017 Appendix 1.2)

         RSAPublicKey ::= SEQUENCE {
             modulus           INTEGER,  -- n
             publicExponent    INTEGER   -- e
         }

   The fields of type RSAPublicKey have the following meanings:

   o  modulus is the RSA modulus n.

   o  publicExponent is the RSA public exponent e.



We decoded the public key using the following command from the terminal:

cat id_rsa_homework.pub | cut -d " " -f2 | base64 -d | hexdump -ve '/1 "%02x "' -e '2/8 "\n"'

This command was suggested from the digital cat online's blog post (https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/).

I was able to decode the meaning of each byte using the explanations on the same blog post.

Bytes: 00 00 00 07
Translation: The following information is 7 bytes long.

Bytes: 73 73 68 2d 72 73 61
Translation: "ssh-rsa"

Bytes: 00 00 00 03
Translation: The following information is 3 bytes long.

Bytes: 01 00 01
Translation: 65537 (the public exponent e)

Bytes: 00 00 01 81
Translation: The following information is 385 bytes long.

Bytes: 00 b6 59 74 b3 ed d3 7f 40 64
6e 65 85 33 39 70 2b c4 b2 c4 70 2b 32 39 3e 1b
97 0a d9 3b a8 77 7e 4b 24 e4 fe 38 80 40 8c 0c
7c 05 27 14 be a6 10 30 fd 80 10 27 5a ca d8 9e
59 83 18 08 01 7d 6f 2a fe 70 fc 44 e4 ab 8b 97
3c 1c b5 00 fe 92 e1 ea 76 1a 7a c9 57 18 f9 10
f5 fe 36 45 f1 01 48 fa e3 c1 d9 93 90 61 6f ac
f9 62 1b e9 37 73 4d 66 c9 76 7c 36 b0 3c 04 e1
2d ac cf 75 ce 0f 30 da 1d 4a 3f ca 4c 02 58 3f
5a bc 24 ec 84 4f 9f f1 42 7c 42 07 b7 2b 5b 86
cc 49 57 86 41 57 7f f2 2e 52 e6 43 84 a3 df ed
0a ea 33 6d bc ae 54 64 b1 da 7d 0b 5f 74 d0 53
e3 2c 6b a5 bc 2f f9 6c a1 18 1a 6b fd e2 ad d0
ef d6 4d 85 6c ba 82 67 1c a6 5a 99 a2 6f 13 3d
34 9c 7e 14 0c 8e aa 5d 3c 2c 63 ec fd d0 d7 b8
32 55 66 7a 06 50 05 c8 57 e5 43 b2 29 c7 77 ff
e1 07 d2 9e 14 50 cb e6 02 d5 7b 57 34 84 fd 61
d9 12 f5 c3 65 82 2f 51 30 a5 fe 2d 7c cd 45 2c
a4 7e b4 22 a4 11 d0 b8 ec ae 65 44 76 bc 67 cd
14 12 e5 76 15 fa 3d b7 e0 d1 09 a4 00 a5 80 45
eb 77 a7 27 f2 8f 5a 04 21 9d 30 9b 2a a8 29 93
d5 24 26 ea c5 c0 7a ae a7 80 a5 71 be 05 7c bc
fe 95 7f 46 d5 45 ef 4b 4b e0 c8 03 4e 65 37 92
87 93 77 bc 8d c0 61 6b ac fe 72 96 d1 15 de 2b
01 af 6c 02 87 ea d5
Translation: 4138196806302610348041290943225004202972822838543414342871233969961283923539223802079865046318576874029808091234896855959136347165987251818584499967625927942654923341528179827126830027465376944511943848349399081209262463753812392524711169820311167379388278476544108209031262343894802350158654377234265713907734027638396167854479072793028490902356485960474589933730522786484808505184923207820222775455021836583462361195066021992141884539512085644617985569882703450487695982561003302355228653886921571438035053203544313098920486704404052206567483314488791314948685520821334920571971913365759061627668916938723132123696621027016564218174988261875182991096230594803285923439703223422447868709367254396482683894610521221377036691316119492874418423655152794530861810144135821852475223935356034628625631186618483463728630387875278814075963467601630865274362588373154827820814322716187690646500989244870040568035367296374057774607061
(The RSA modulus n)

*******SANITY CHECK*******

It is the case that, for the values decrypted from the public and private keys:
	- The private and public key have the same n and e values
	- Exponent 1 is equal to d mod (p-1)
	- Exponent 2 is equal to d mod (q-1)
	- e*d mod λ(n) == 1
	- n = p * q
	- 1 < e < λ(n)

The following code checks and verifies these properties of the decrypted values:

import math

# From https://stackoverflow.com/questions/64977905/math-lcm-gives-error-module-math-has-no-lcm-member
# Because math.lcm is being funny
def lcm(a,b):
  return (a * b) // math.gcd(a,b)

# Values from the RSA private key
RSA_n = 4138196806302610348041290943225004202972822838543414342871233969961283923539223802079865046318576874029808091234896855959136347165987251818584499967625927942654923341528179827126830027465376944511943848349399081209262463753812392524711169820311167379388278476544108209031262343894802350158654377234265713907734027638396167854479072793028490902356485960474589933730522786484808505184923207820222775455021836583462361195066021992141884539512085644617985569882703450487695982561003302355228653886921571438035053203544313098920486704404052206567483314488791314948685520821334920571971913365759061627668916938723132123696621027016564218174988261875182991096230594803285923439703223422447868709367254396482683894610521221377036691316119492874418423655152794530861810144135821852475223935356034628625631186618483463728630387875278814075963467601630865274362588373154827820814322716187690646500989244870040568035367296374057774607061
RSA_e = 65537
RSA_d = 2816742013402400857771548097812292483488939896616921287534413784060956628242996087507525517665218056572557626102774216816166643433900320679543402338462624465475891104906092343383138695625417704773384548133395541658360761792480843159357928719872146506967540695487375422992745806167557838140705450570568674667899159847432971479018828420956222449352586816772372588824402871390219610415402587510144159639181975191901864146218169508025349457910716519229804816926278560832760558986377136725966123298173108893751253956133047751486422790646158272851985093008736511795037296999988474428709280962638223406411441260791601747243517412415100004934763908822495781632523258531125078149175100770193215503674305323323695329973134349014692370484232184199107572619615086231320265044927918493352668902565251059569266985290334800592280777850581914977796637780743706894321503239671683729780141889452877646882818309705423199800717238821595681549441
RSA_p = 2062093563505648296223230585266889641383614748880643491689896390278039246489839381523676798701000725919514231678645574189867737736120863365019212270459187373690863797801036939521171499390694702449670847249762897042794787590517561256175849282835391042278638988461927498936608604929343639711605795849297007893325013816531482046436305668446117712908127590020875250862281195428592655861868689956312956603009924556512389776499154974371428269014515907502415655326229409
RSA_q = 2006793910586431730344384765865153519025933318949476365570759044745525125949687806176910906179069093019821567931817802593671115964539601924267949535391580053660942642697184460399954061191451525302783263748288151680881506973601604403296410373848556847952772438287797795282086681189467833244633644135425140414924850861059696381460696499977045578288874229514078115625539979582638363684641899663425654452554201627957949021718828019321800526059441143631734391235803829
RSA_exponent1 = 895387285604776440264651613057355059353548757326341941849937921756292824471082888750160530091923305270177403464901004085036944211007391378585405550764561928271372066069916355462623821019591973200028736441803908649263946632640466311655952256613008268460918713011902754737614951408736011036104278994818880229799196151441725812829973151150818190582824768134398080684009582042380048031817100417882994431418182448154066799973090820539355390868457194863912634139776161
RSA_exponent2 = 1326155263035960935189052898741992061819951265855667362200039725176372853193692558367270922314254594345109667600883427873251786949482668107147422470181331775088908020088993420441302019258442927038745141975900812688211196507617252622218963896440287906495363253273818373069745213782056889848358003782002951099836433860897422686187669632688494544304940018707374599228321573702557103511270824610880901913204295562891661415408406284828537451868537413820388250149250469
RSA_coefficient = 1071701866141507989229277498504409496049539630361434932092856558492871726323735038737858285719895566411966350105500728279145830551284263287218395938773086187749606397745212806329760745797998824962621195342827536465463241089528039001893876035275210942813376301641922029819185334081197490743080781043712329394163254041910655472340332486782219048725107683216133225736730572276964618482950465968996398573198419513004280976935410362186897210221014842070339758659368887

# Values from the RSA public key
public_RSA_n = 4138196806302610348041290943225004202972822838543414342871233969961283923539223802079865046318576874029808091234896855959136347165987251818584499967625927942654923341528179827126830027465376944511943848349399081209262463753812392524711169820311167379388278476544108209031262343894802350158654377234265713907734027638396167854479072793028490902356485960474589933730522786484808505184923207820222775455021836583462361195066021992141884539512085644617985569882703450487695982561003302355228653886921571438035053203544313098920486704404052206567483314488791314948685520821334920571971913365759061627668916938723132123696621027016564218174988261875182991096230594803285923439703223422447868709367254396482683894610521221377036691316119492874418423655152794530861810144135821852475223935356034628625631186618483463728630387875278814075963467601630865274362588373154827820814322716187690646500989244870040568035367296374057774607061
public_RSA_e = 65537

# Is the n from the public key equal to that from the private key?
if public_RSA_n == RSA_n:
  print("Public and private key have same value of n")
else:
  print("There is a problem")

# Is the e from the public key equal to that from the private key?
if public_RSA_e == RSA_e:
  print("Public and private key have same value of e")
else:
  print("There is a problem")

# Is exponent 1 equal to its intended value d mod (p-1)
if RSA_exponent1 == (RSA_d % (RSA_p - 1)):
  print("Correct value of exponent 1")
else:
  print("There is a problem")

# Is exponent 2 equal to its intended value d mod (q-1)
if RSA_exponent2 == (RSA_d % (RSA_q - 1)):
  print("Correct value of exponent 2")
else:
  print("There is a problem")

# Is coefficient the CRT coefficient (p^-1) mod p
if ((RSA_coefficient * RSA_q) % RSA_p) == 1:
  print("Correct value of coefficient")
else:
  print("There is a problem")

# Is e*d mod λ(n) == 1?
lambda_n = lcm(RSA_p - 1, RSA_q - 1)
if (RSA_e*RSA_d) % lambda_n == 1:
  print("e*d mod λ(n) == 1")
else:
  print("There is a problem")

# Is n = p * q?
if (RSA_p*RSA_q) == RSA_n:
  print("p * q == n")
else:
  print("There is a problem")

# Is 1 < e < λ(n)?
if (1 < RSA_e) and (RSA_e < lambda_n):
  print("1 < e < λ(n)")
else:
  print("There is a problem")
